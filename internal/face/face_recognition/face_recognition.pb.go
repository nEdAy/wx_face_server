// Code generated by protoc-gen-go. DO NOT EDIT.
// source: face_recognition.proto

package face_recognition

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetFaceCountRequest struct {
	PrefixCosUrl         string   `protobuf:"bytes,1,opt,name=prefixCosUrl" json:"prefixCosUrl,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFaceCountRequest) Reset()         { *m = GetFaceCountRequest{} }
func (m *GetFaceCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetFaceCountRequest) ProtoMessage()    {}
func (*GetFaceCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_recognition_c39d3f70777cf79f, []int{0}
}
func (m *GetFaceCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFaceCountRequest.Unmarshal(m, b)
}
func (m *GetFaceCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFaceCountRequest.Marshal(b, m, deterministic)
}
func (dst *GetFaceCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFaceCountRequest.Merge(dst, src)
}
func (m *GetFaceCountRequest) XXX_Size() int {
	return xxx_messageInfo_GetFaceCountRequest.Size(m)
}
func (m *GetFaceCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFaceCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFaceCountRequest proto.InternalMessageInfo

func (m *GetFaceCountRequest) GetPrefixCosUrl() string {
	if m != nil {
		return m.PrefixCosUrl
	}
	return ""
}

func (m *GetFaceCountRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type GetFaceCountReply struct {
	Count                int32    `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	UnknownFaceEncodings string   `protobuf:"bytes,2,opt,name=unknown_face_encodings,json=unknownFaceEncodings" json:"unknown_face_encodings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFaceCountReply) Reset()         { *m = GetFaceCountReply{} }
func (m *GetFaceCountReply) String() string { return proto.CompactTextString(m) }
func (*GetFaceCountReply) ProtoMessage()    {}
func (*GetFaceCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_recognition_c39d3f70777cf79f, []int{1}
}
func (m *GetFaceCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFaceCountReply.Unmarshal(m, b)
}
func (m *GetFaceCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFaceCountReply.Marshal(b, m, deterministic)
}
func (dst *GetFaceCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFaceCountReply.Merge(dst, src)
}
func (m *GetFaceCountReply) XXX_Size() int {
	return xxx_messageInfo_GetFaceCountReply.Size(m)
}
func (m *GetFaceCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFaceCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetFaceCountReply proto.InternalMessageInfo

func (m *GetFaceCountReply) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetFaceCountReply) GetUnknownFaceEncodings() string {
	if m != nil {
		return m.UnknownFaceEncodings
	}
	return ""
}

type IsMatchFaceRequest struct {
	PrefixCosUrl         string   `protobuf:"bytes,1,opt,name=prefixCosUrl" json:"prefixCosUrl,omitempty"`
	FileName             string   `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	KnownFaceEncoding    string   `protobuf:"bytes,3,opt,name=knownFaceEncoding" json:"knownFaceEncoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsMatchFaceRequest) Reset()         { *m = IsMatchFaceRequest{} }
func (m *IsMatchFaceRequest) String() string { return proto.CompactTextString(m) }
func (*IsMatchFaceRequest) ProtoMessage()    {}
func (*IsMatchFaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_recognition_c39d3f70777cf79f, []int{2}
}
func (m *IsMatchFaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsMatchFaceRequest.Unmarshal(m, b)
}
func (m *IsMatchFaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsMatchFaceRequest.Marshal(b, m, deterministic)
}
func (dst *IsMatchFaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsMatchFaceRequest.Merge(dst, src)
}
func (m *IsMatchFaceRequest) XXX_Size() int {
	return xxx_messageInfo_IsMatchFaceRequest.Size(m)
}
func (m *IsMatchFaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsMatchFaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsMatchFaceRequest proto.InternalMessageInfo

func (m *IsMatchFaceRequest) GetPrefixCosUrl() string {
	if m != nil {
		return m.PrefixCosUrl
	}
	return ""
}

func (m *IsMatchFaceRequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *IsMatchFaceRequest) GetKnownFaceEncoding() string {
	if m != nil {
		return m.KnownFaceEncoding
	}
	return ""
}

type IsMatchFaceReply struct {
	IsMatchFace          bool     `protobuf:"varint,1,opt,name=isMatchFace" json:"isMatchFace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsMatchFaceReply) Reset()         { *m = IsMatchFaceReply{} }
func (m *IsMatchFaceReply) String() string { return proto.CompactTextString(m) }
func (*IsMatchFaceReply) ProtoMessage()    {}
func (*IsMatchFaceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_recognition_c39d3f70777cf79f, []int{3}
}
func (m *IsMatchFaceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsMatchFaceReply.Unmarshal(m, b)
}
func (m *IsMatchFaceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsMatchFaceReply.Marshal(b, m, deterministic)
}
func (dst *IsMatchFaceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsMatchFaceReply.Merge(dst, src)
}
func (m *IsMatchFaceReply) XXX_Size() int {
	return xxx_messageInfo_IsMatchFaceReply.Size(m)
}
func (m *IsMatchFaceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsMatchFaceReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsMatchFaceReply proto.InternalMessageInfo

func (m *IsMatchFaceReply) GetIsMatchFace() bool {
	if m != nil {
		return m.IsMatchFace
	}
	return false
}

func init() {
	proto.RegisterType((*GetFaceCountRequest)(nil), "face_recognition.GetFaceCountRequest")
	proto.RegisterType((*GetFaceCountReply)(nil), "face_recognition.GetFaceCountReply")
	proto.RegisterType((*IsMatchFaceRequest)(nil), "face_recognition.IsMatchFaceRequest")
	proto.RegisterType((*IsMatchFaceReply)(nil), "face_recognition.IsMatchFaceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceRecognitionClient is the client API for FaceRecognition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceRecognitionClient interface {
	GetFaceCount(ctx context.Context, in *GetFaceCountRequest, opts ...grpc.CallOption) (*GetFaceCountReply, error)
	IsMatchFace(ctx context.Context, in *IsMatchFaceRequest, opts ...grpc.CallOption) (*IsMatchFaceReply, error)
}

type faceRecognitionClient struct {
	cc *grpc.ClientConn
}

func NewFaceRecognitionClient(cc *grpc.ClientConn) FaceRecognitionClient {
	return &faceRecognitionClient{cc}
}

func (c *faceRecognitionClient) GetFaceCount(ctx context.Context, in *GetFaceCountRequest, opts ...grpc.CallOption) (*GetFaceCountReply, error) {
	out := new(GetFaceCountReply)
	err := c.cc.Invoke(ctx, "/face_recognition.FaceRecognition/GetFaceCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceRecognitionClient) IsMatchFace(ctx context.Context, in *IsMatchFaceRequest, opts ...grpc.CallOption) (*IsMatchFaceReply, error) {
	out := new(IsMatchFaceReply)
	err := c.cc.Invoke(ctx, "/face_recognition.FaceRecognition/IsMatchFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceRecognitionServer is the server API for FaceRecognition service.
type FaceRecognitionServer interface {
	GetFaceCount(context.Context, *GetFaceCountRequest) (*GetFaceCountReply, error)
	IsMatchFace(context.Context, *IsMatchFaceRequest) (*IsMatchFaceReply, error)
}

func RegisterFaceRecognitionServer(s *grpc.Server, srv FaceRecognitionServer) {
	s.RegisterService(&_FaceRecognition_serviceDesc, srv)
}

func _FaceRecognition_GetFaceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFaceCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRecognitionServer).GetFaceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_recognition.FaceRecognition/GetFaceCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRecognitionServer).GetFaceCount(ctx, req.(*GetFaceCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceRecognition_IsMatchFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMatchFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRecognitionServer).IsMatchFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/face_recognition.FaceRecognition/IsMatchFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRecognitionServer).IsMatchFace(ctx, req.(*IsMatchFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceRecognition_serviceDesc = grpc.ServiceDesc{
	ServiceName: "face_recognition.FaceRecognition",
	HandlerType: (*FaceRecognitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFaceCount",
			Handler:    _FaceRecognition_GetFaceCount_Handler,
		},
		{
			MethodName: "IsMatchFace",
			Handler:    _FaceRecognition_IsMatchFace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face_recognition.proto",
}

func init() {
	proto.RegisterFile("face_recognition.proto", fileDescriptor_face_recognition_c39d3f70777cf79f)
}

var fileDescriptor_face_recognition_c39d3f70777cf79f = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4b, 0x4b, 0x4c, 0x4e,
	0x8d, 0x2f, 0x4a, 0x4d, 0xce, 0x4f, 0xcf, 0xcb, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x17, 0x57, 0x0a, 0xe5, 0x12, 0x76, 0x4f, 0x2d, 0x71, 0x4b, 0x4c,
	0x4e, 0x75, 0xce, 0x2f, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe2,
	0xe2, 0x29, 0x28, 0x4a, 0x4d, 0xcb, 0xac, 0x70, 0xce, 0x2f, 0x0e, 0x2d, 0xca, 0x91, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x11, 0x13, 0x92, 0xe2, 0xe2, 0x48, 0xcb, 0xcc, 0x49, 0xf5, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x02, 0xcb, 0xc3, 0xf9, 0x4a, 0xf1, 0x5c, 0x82, 0xa8, 0xc6, 0x16, 0xe4,
	0x54, 0x0a, 0x89, 0x70, 0xb1, 0x26, 0x83, 0x78, 0x60, 0xd3, 0x58, 0x83, 0x20, 0x1c, 0x21, 0x13,
	0x2e, 0xb1, 0xd2, 0xbc, 0xec, 0xbc, 0xfc, 0xf2, 0xbc, 0x78, 0xb0, 0xeb, 0x52, 0xf3, 0x92, 0xf3,
	0x53, 0x32, 0xf3, 0xd2, 0x8b, 0xa1, 0x86, 0x8a, 0x40, 0x65, 0x41, 0x86, 0xb9, 0xc2, 0xe4, 0x94,
	0x9a, 0x18, 0xb9, 0x84, 0x3c, 0x8b, 0x7d, 0x13, 0x4b, 0x92, 0x33, 0x40, 0x12, 0x54, 0x72, 0xb7,
	0x90, 0x0e, 0x97, 0x20, 0x86, 0x65, 0x12, 0xcc, 0x60, 0x45, 0x98, 0x12, 0x4a, 0x26, 0x5c, 0x02,
	0x28, 0x6e, 0x00, 0x79, 0x52, 0x81, 0x8b, 0x3b, 0x13, 0x21, 0x06, 0x76, 0x00, 0x47, 0x10, 0xb2,
	0x90, 0xd1, 0x29, 0x46, 0x2e, 0x7e, 0x88, 0x7a, 0x78, 0x34, 0x08, 0xc5, 0x70, 0xf1, 0x20, 0x87,
	0x97, 0x90, 0xaa, 0x1e, 0x46, 0x0c, 0x62, 0x89, 0x26, 0x29, 0x65, 0x42, 0xca, 0x0a, 0x72, 0x2a,
	0x95, 0x18, 0x84, 0x22, 0xb9, 0xb8, 0x91, 0xdc, 0x29, 0xa4, 0x82, 0xa9, 0x0b, 0x33, 0x28, 0xa5,
	0x94, 0x08, 0xa8, 0x02, 0x1b, 0x9d, 0xc4, 0x06, 0x4e, 0x58, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6b, 0xb5, 0x45, 0x40, 0x72, 0x02, 0x00, 0x00,
}
